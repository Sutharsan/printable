<?php

/**
 * @file
 * Provides printer friendly content entities.
 */

use Drupal\Component\Utility\String;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Template\Attribute;
use Drupal\entity\Entity\EntityDisplay;

/**
 * Implements hook_permission().
 */
function printable_permission() {
  return array(
    'view printer friendly versions' => array(
      'title' => t('View Printer Friendly Versions'),
    ),
    'administer printable' => array(
      'title' => t('Administer Printable'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function printable_theme() {
  $module_path = drupal_get_path('module', 'printable');
  return array(
    'printable_navigation' => array(
      'variables' => array('printable_link' => NULL),
    ),
    'printable' => array(
      'template' => 'printable',
      'pattern' => 'printable__',
      'variables' => array(
        'header' => NULL,
        'content' => NULL,
        'footer' => NULL,
      ),
      'path' => $module_path . '/templates',
    ),
    'printable_header' => array(
      'template' => 'printable-header',
      'pattern' => 'printable_header__',
      'variables' => array(
        'logo_url' => NULL,
        ),
      'path' => $module_path . '/templates',
    ),
    'printable_footer' => array(
      'template' => 'printable-footer',
      'pattern' => 'printable_footer__',
      'variables' => array(
        'footer_content' => NULL,
        ),
      'path' => $module_path . '/templates',
    ),
  );
}

/**
 * Preprocess variables for list of printable printer friendly page.
 *
 * @param array $variables
 *  An associative array containing:
 *  - items: Array of participant names.
 */
function template_preprocess_printable(&$variables) {
  global $base_url;
  $language_interface = \Drupal::languageManager()->getCurrentLanguage();
  $variables['base_url'] = $base_url.'/'.drupal_get_path('module', 'printable');
  $request = \Drupal::request();
  if ($route = $request->attributes->get(\Symfony\Cmf\Component\Routing\RouteObjectInterface::ROUTE_OBJECT)) {
    $title = \Drupal::service('title_resolver')->getTitle($request, $route);
  }
  $variables['title'] = $title;
  
  // use this to render block in twig template
  $block = \Drupal\block\Entity\Block::load('printablelinksblockcontent');
  $variables['block_output'] = \Drupal::entityManager()
  ->getViewBuilder('block')
  ->view($block);

  // trying this to render views in template
  $variables['view_output'] = views_embed_view("comments_recent");
  
  // create source url over here
  $source_url = $base_url.\Drupal::service('path.current')->getPath();
  $pos = strpos($source_url, "printable");
  $source_url = substr($source_url, 0,$pos);
  $variables['source_url'] = $source_url;

  // HTML element attributes.
  $attributes = array();
  $attributes['lang'] = $language_interface->getId();
  $attributes['dir'] = $language_interface->getDirection();
  $variables['html_attributes'] = new Attribute($attributes);

  if(\Drupal::service('config.factory')->get('printable.settings')->get('send_to_printer')) {
    echo "hello";
    //@todo make this automate
    $variables['jquery'] = $base_url.'/core/assets/vendor/jquery/jquery.js';
    $variables['send_script'] = 'printable/js/script.js';
   if(\Drupal::service('config.factory')->get('printable.settings')->get('close_window'))
   $variables['close_script']='printable/js/close.js';//@todo close.js showing error
  }
  //else
    //echo "not ok";
}

/**
 * Implements hook_entity_view_mode_alter().
 */
function printable_entity_view_mode_info_alter(&$view_modes) {
  $printable_manager = \Drupal::service('printable.entity_manager');
  foreach($printable_manager->getPrintableEntities() as $entity_type => $entity_definition) {
    // Add an additional view mode to this entity.
    $view_modes[$entity_type]['printable'] = array(
      'label' => t('Printable'),
      'custom_settings' => FALSE,
      'cache' => TRUE,
    );
  }
}

/**
 * Implements hook_entity_view().
 */
function printable_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode, $langcode) {
  // Load the printable manager and check if a printable is available for this
  // entity.
  $printable_manager = \Drupal::service('printable.entity_manager');
  $link_builder = \Drupal::service('printable.link_builder');
  if ($printable_manager->isPrintableEntity($entity)) {
    $printable_navigation = array( '#theme' => 'links__entity__printable', '#links' => $link_builder->buildLinks($entity));
    
    // Add the built links to the entity being rendered.
    $build['printable_navigation'] = array(
        '#markup' => drupal_render($printable_navigation),
        '#weight' => 100,
        '#cache' => [
          'tags' => $entity->getEntityType()->getListCacheTags(),
        ],
      );
  }
}

